import { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

interface TournamentInfo {
  tournamentName: string;
  tournamentNameImage: string;
  prizeFund: string;
  prizeFundImage: string;
  prizeCount: string;
  prizeCountImage: string;
  streamLinks: string;
  streamLinksImage: string;
  sponsor: string;
  sponsorImage: string;
  startDate: string;
  startDateImage: string;
  registrationEnd: string;
  registrationEndImage: string;
  rules: string;
  regulationsLink: string;
}

interface HomePageEditorProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  settingsUrl: string;
  adminToken: string;
}

export const HomePageEditor = ({ open, onOpenChange, settingsUrl, adminToken }: HomePageEditorProps) => {
  const [title, setTitle] = useState('');
  const [subtitle, setSubtitle] = useState('');
  const [description, setDescription] = useState('');
  const [tournamentInfo, setTournamentInfo] = useState<TournamentInfo>({
    tournamentName: '',
    tournamentNameImage: '',
    prizeFund: '',
    prizeFundImage: '',
    prizeCount: '',
    prizeCountImage: '',
    streamLinks: '',
    streamLinksImage: '',
    sponsor: '',
    sponsorImage: '',
    startDate: '',
    startDateImage: '',
    registrationEnd: '',
    registrationEndImage: '',
    rules: '',
    regulationsLink: ''
  });
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    if (open) {
      loadSettings();
    }
  }, [open]);

  const loadSettings = async () => {
    try {
      const response = await fetch(settingsUrl);
      if (!response.ok) return;
      
      const data = await response.json();
      setTitle(data.settings?.home_title || 'League of Legends: Wild Rift');
      setSubtitle(data.settings?.home_subtitle || '–¢—É—Ä–Ω–∏—Ä 5x5');
      setDescription(data.settings?.home_description || '–°–æ–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ ¬´–î–∏–∫–æ–º —É—â–µ–ª—å–µ¬ª');
      
      try {
        const info = JSON.parse(data.settings?.tournament_info || '{}');
        setTournamentInfo({
          tournamentName: info.tournamentName || '',
          tournamentNameImage: info.tournamentNameImage || '',
          prizeFund: info.prizeFund || '',
          prizeFundImage: info.prizeFundImage || '',
          prizeCount: info.prizeCount || '',
          prizeCountImage: info.prizeCountImage || '',
          streamLinks: info.streamLinks || '',
          streamLinksImage: info.streamLinksImage || '',
          sponsor: info.sponsor || '',
          sponsorImage: info.sponsorImage || '',
          startDate: info.startDate || '',
          startDateImage: info.startDateImage || '',
          registrationEnd: info.registrationEnd || '',
          registrationEndImage: info.registrationEndImage || '',
          rules: info.rules || '',
          regulationsLink: info.regulationsLink || ''
        });
      } catch {
        setTournamentInfo({
          tournamentName: '',
          tournamentNameImage: '',
          prizeFund: '',
          prizeFundImage: '',
          prizeCount: '',
          prizeCountImage: '',
          streamLinks: '',
          streamLinksImage: '',
          sponsor: '',
          sponsorImage: '',
          startDate: '',
          startDateImage: '',
          registrationEnd: '',
          registrationEndImage: '',
          rules: '',
          regulationsLink: ''
        });
      }
    } catch (error) {
      console.error('Error loading settings:', error);
    }
  };

  const saveSettings = async () => {
    setLoading(true);
    try {
      const updates = [
        { key: 'home_title', value: title },
        { key: 'home_subtitle', value: subtitle },
        { key: 'home_description', value: description },
        { key: 'tournament_info', value: tournamentInfo }
      ];

      for (const update of updates) {
        const response = await fetch(settingsUrl, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'X-Admin-Token': adminToken
          },
          body: JSON.stringify(update)
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
        }
      }

      toast({ title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
      onOpenChange(false);
    } catch (error) {
      console.error('Save error:', error);
      toast({ 
        title: '–û—à–∏–±–∫–∞', 
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        variant: 'destructive' 
      });
    } finally {
      setLoading(false);
    }
  };

  const updateTournamentInfo = (field: keyof TournamentInfo, value: string) => {
    setTournamentInfo({ ...tournamentInfo, [field]: value });
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="bg-card border-border max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl text-primary">–†–µ–¥–∞–∫—Ç–æ—Ä –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</DialogTitle>
        </DialogHeader>

        <div className="space-y-6 mt-4">
          <Card className="bg-background/50 border-border">
            <CardHeader>
              <CardTitle className="text-lg">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="title">–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="title"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="League of Legends: Wild Rift"
                />
              </div>
              <div>
                <Label htmlFor="subtitle">–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                <Input
                  id="subtitle"
                  value={subtitle}
                  onChange={(e) => setSubtitle(e.target.value)}
                  placeholder="–¢—É—Ä–Ω–∏—Ä 5x5"
                />
              </div>
              <div>
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="–°–æ–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤ ¬´–î–∏–∫–æ–º —É—â–µ–ª—å–µ¬ª"
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-background/50 border-border">
            <CardHeader>
              <CardTitle className="text-lg">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏</CardTitle>
              <p className="text-sm text-muted-foreground mt-2">
                üí° –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–µ "–ö–∞—Ä—Ç–∏–Ω–∫–∞ (URL)". 
                –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–ª–µ–≤–∞ –æ—Ç —Ç–µ–∫—Å—Ç–∞.
              </p>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="tournamentName">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</Label>
                  <Input
                    id="tournamentName"
                    value={tournamentInfo.tournamentName}
                    onChange={(e) => updateTournamentInfo('tournamentName', e.target.value)}
                    placeholder="–ö—É–±–æ–∫ League of Legends: Wild Rift"
                  />
                </div>
                <div>
                  <Label htmlFor="tournamentNameImage">–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞" (URL)</Label>
                  <Input
                    id="tournamentNameImage"
                    value={tournamentInfo.tournamentNameImage}
                    onChange={(e) => updateTournamentInfo('tournamentNameImage', e.target.value)}
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="prizeFund">–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥</Label>
                  <Input
                    id="prizeFund"
                    value={tournamentInfo.prizeFund}
                    onChange={(e) => updateTournamentInfo('prizeFund', e.target.value)}
                    placeholder="100 000 ‚ÇΩ"
                  />
                </div>
                <div>
                  <Label htmlFor="prizeFundImage">–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è "–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥" (URL)</Label>
                  <Input
                    id="prizeFundImage"
                    value={tournamentInfo.prizeFundImage}
                    onChange={(e) => updateTournamentInfo('prizeFundImage', e.target.value)}
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="prizeCount">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç</Label>
                  <Input
                    id="prizeCount"
                    value={tournamentInfo.prizeCount}
                    onChange={(e) => updateTournamentInfo('prizeCount', e.target.value)}
                    placeholder="3"
                  />
                </div>
                <div>
                  <Label htmlFor="prizeCountImage">–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç" (URL)</Label>
                  <Input
                    id="prizeCountImage"
                    value={tournamentInfo.prizeCountImage}
                    onChange={(e) => updateTournamentInfo('prizeCountImage', e.target.value)}
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="streamLinks">–°—Ç—Ä–∏–º-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏</Label>
                  <Textarea
                    id="streamLinks"
                    value={tournamentInfo.streamLinks}
                    onChange={(e) => updateTournamentInfo('streamLinks', e.target.value)}
                    placeholder="–°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º—ã (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
                    rows={3}
                  />
                </div>
                <div>
                  <Label htmlFor="streamLinksImage">–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è "–°—Ç—Ä–∏–º-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏" (URL)</Label>
                  <Input
                    id="streamLinksImage"
                    value={tournamentInfo.streamLinksImage}
                    onChange={(e) => updateTournamentInfo('streamLinksImage', e.target.value)}
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="sponsor">–°–ø–æ–Ω—Å–æ—Ä</Label>
                  <Input
                    id="sponsor"
                    value={tournamentInfo.sponsor}
                    onChange={(e) => updateTournamentInfo('sponsor', e.target.value)}
                    placeholder="–ö–æ–º–ø–∞–Ω–∏—è XYZ"
                  />
                </div>
                <div>
                  <Label htmlFor="sponsorImage">–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è "–°–ø–æ–Ω—Å–æ—Ä" (URL)</Label>
                  <Input
                    id="sponsorImage"
                    value={tournamentInfo.sponsorImage}
                    onChange={(e) => updateTournamentInfo('sponsorImage', e.target.value)}
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="startDate">–ù–∞—á–∞–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞</Label>
                  <Input
                    id="startDate"
                    value={tournamentInfo.startDate}
                    onChange={(e) => updateTournamentInfo('startDate', e.target.value)}
                    placeholder="15 –Ω–æ—è–±—Ä—è 2024"
                  />
                </div>
                <div>
                  <Label htmlFor="startDateImage">–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è "–ù–∞—á–∞–ª–æ —Ç—É—Ä–Ω–∏—Ä–∞" (URL)</Label>
                  <Input
                    id="startDateImage"
                    value={tournamentInfo.startDateImage}
                    onChange={(e) => updateTournamentInfo('startDateImage', e.target.value)}
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="registrationEnd">–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</Label>
                  <Input
                    id="registrationEnd"
                    value={tournamentInfo.registrationEnd}
                    onChange={(e) => updateTournamentInfo('registrationEnd', e.target.value)}
                    placeholder="10 –Ω–æ—è–±—Ä—è 2024"
                  />
                </div>
                <div>
                  <Label htmlFor="registrationEndImage">–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è "–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" (URL)</Label>
                  <Input
                    id="registrationEndImage"
                    value={tournamentInfo.registrationEndImage}
                    onChange={(e) => updateTournamentInfo('registrationEndImage', e.target.value)}
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="streamLinks">–°—Ç—Ä–∏–º-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏</Label>
                <Textarea
                  id="streamLinks"
                  value={tournamentInfo.streamLinks}
                  onChange={(e) => updateTournamentInfo('streamLinks', e.target.value)}
                  placeholder="–°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º—ã (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="rules">–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è</Label>
                <Textarea
                  id="rules"
                  value={tournamentInfo.rules}
                  onChange={(e) => updateTournamentInfo('rules', e.target.value)}
                  placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞"
                  rows={6}
                />
              </div>

              <div>
                <Label htmlFor="regulationsLink">–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç</Label>
                <Input
                  id="regulationsLink"
                  value={tournamentInfo.regulationsLink}
                  onChange={(e) => updateTournamentInfo('regulationsLink', e.target.value)}
                  placeholder="https://example.com/regulations.pdf"
                />
              </div>
            </CardContent>
          </Card>

          <div className="flex gap-3">
            <Button
              onClick={saveSettings}
              disabled={loading}
              className="bg-primary hover:bg-primary/90"
            >
              <Icon name="Save" className="w-4 h-4 mr-2" />
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </Button>
            <Button
              onClick={() => onOpenChange(false)}
              variant="outline"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};